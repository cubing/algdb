type Query {
  getUser(id: ID!): User!
  getUsers(): [User]!
  getPuzzles(): [Puzzle]!
}

type Mutation {
  login(username: String!, password: String!): User!
  addPuzzle(): Puzzle!
  addAlgSet(puzzle_id: ID!): AlgSet!
  addCase(algset_id: ID!): Case!
  addAlg(case_id: ID!): Alg!
  voteAlg(upvote: Boolean!): Alg!
  updateUser(user_id: ID!, is_public: Boolean): User!
  favoriteAlg(alg_id: ID!): Alg!
}

type User {
	id: ID!
	wca_id: String
	email: String!
	name: String
	avatar: String
	country: String
	is_public: Boolean!
	created_at: Int!
	updated_at: Int
	created_by: User!
	role: UserRoleEnum!
}
type UserPaginator {
	paginatorInfo: PaginatorInfo!
	data: [User]!
}
type UserFilterInput {
	created_by: String
}
type Puzzle {
	id: ID!
	name: String!
	code: String!
	created_at: Int!
	updated_at: Int
	created_by: User!
	is_public: Boolean!
	algsets(
		id: String
		first: Int
		after: ID
		search: String
		sortBy: [String]
		sortDesc: [Boolean]
		created_by: String
		is_public: Boolean
	): AlgsetPaginator!
}
type PuzzlePaginator {
	paginatorInfo: PaginatorInfo!
	data: [Puzzle]!
}
type PuzzleFilterInput {
	created_by: String
	is_public: Boolean
	code: String
}
type Algset {
	id: ID!
	name: String!
	code: String!
	mask: String
	visualization: CaseVisualizationEnum!
	created_at: Int!
	updated_at: Int
	created_by: User!
	is_public: Boolean!
	puzzle: Puzzle!
	algcases(
		id: String
		first: Int
		after: ID
		search: String
		sortBy: [String]
		sortDesc: [Boolean]
		created_by: String
		subset: String
	): AlgcasePaginator!
	subsets(
		id: String
		first: Int
		after: ID
		search: String
		sortBy: [String]
		sortDesc: [Boolean]
		created_by: String
		is_public: Boolean
		puzzle: String
		parent: String
	): SubsetPaginator!
	score: Int!
}
type AlgsetPaginator {
	paginatorInfo: PaginatorInfo!
	data: [Algset]!
}
type AlgsetFilterInput {
	created_by: String
	puzzle: String
	puzzle_code: String
	is_public: Boolean
	code: String
}
type Subset {
	id: ID!
	name: String!
	code: String!
	mask: String
	visualization: CaseVisualizationEnum!
	created_at: Int!
	updated_at: Int
	created_by: User!
	is_public: Boolean!
	puzzle: Puzzle!
	algset: Algset!
	parent: Subset
	algcases(
		id: String
		first: Int
		after: ID
		search: String
		sortBy: [String]
		sortDesc: [Boolean]
		created_by: String
		algset: String
	): AlgcasePaginator!
	subsets(
		id: String
		first: Int
		after: ID
		search: String
		sortBy: [String]
		sortDesc: [Boolean]
		created_by: String
		is_public: Boolean
		puzzle: String
		algset: String
	): SubsetPaginator!
}
type SubsetPaginator {
	paginatorInfo: PaginatorInfo!
	data: [Subset]!
}
type SubsetFilterInput {
	created_by: String
	puzzle: String
	puzzle_code: String
	algset: String
	algset_code: String
	parent: String
	code: String
	is_public: Boolean
}
type Algcase {
	id: ID!
	name: String!
	created_at: Int!
	updated_at: Int
	created_by: User!
	puzzle: Puzzle!
	algset: Algset!
	subset: Subset!
	algs(
		id: String
		first: Int
		after: ID
		search: String
		sortBy: [String]
		sortDesc: [Boolean]
		created_by: String
		algcase_name: String
		subset_name: String
		algset_name: String
		puzzle_name: String
		tag_name: [String]
	): AlgPaginator!
}
type AlgcasePaginator {
	paginatorInfo: PaginatorInfo!
	data: [Algcase]!
}
type AlgcaseFilterInput {
	created_by: String
	algset: String
	subset: String
}
type Alg {
	id: ID!
	sequence: String!
	created_at: Int!
	updated_at: Int
	created_by: User!
	score: Int!
	current_user_vote: UserAlgVoteLink
}
type AlgPaginator {
	paginatorInfo: PaginatorInfo!
	data: [Alg]!
}
type AlgFilterInput {
	created_by: String
	algcase_name: String
	algcase: ID
	subset_name: String
	algset_name: String
	puzzle_name: String
	tag_name: [String]
}
type AlgAlgcaseLink {
	id: ID!
	alg: Alg!
	algcase: Algcase!
	created_at: Int!
	updated_at: Int
	created_by: User!
}
type AlgAlgcaseLinkPaginator {
	paginatorInfo: PaginatorInfo!
	data: [AlgAlgcaseLink]!
}
type AlgTagLink {
	id: ID!
	alg: Alg!
	tag: Tag!
	created_at: Int!
	updated_at: Int
	created_by: User!
}
type AlgTagLinkPaginator {
	paginatorInfo: PaginatorInfo!
	data: [AlgTagLink]!
}
type UserAlgTagLink {
	id: ID!
	user: User!
	alg: Alg!
	tag: String!
	created_at: Int!
	updated_at: Int
	created_by: User!
}
type UserAlgTagLinkPaginator {
	paginatorInfo: PaginatorInfo!
	data: [UserAlgTagLink]!
}

type UserAlgVoteLink {
	id: ID!
	user: User!
	alg: Alg!
	vote_value: Integer!
	created_at: Int!
	updated_at: Int
	created_by: User!
}
type UserAlgTagVotePaginator {
	paginatorInfo: PaginatorInfo!
	data: [UserAlgVoteLink]!
}

type Tag {
<<<<<<< HEAD
	id: ID!
	name: String!
	created_at: Int!
	updated_at: Int
	created_by: User!
}
type TagPaginator {
	paginatorInfo: PaginatorInfo!
	data: [Tag]!
}
type TagFilterInput {
	created_by: String
}
type Auth {
	type: String!
	token: String!
	expiration: Int!
	user: User!
}
type PaginatorInfo {
	total: Int!
	count: Int!
}
type UserRoleEnum {
	id: ID!
	name: UserRole!
}
type CaseVisualizationEnum {
	id: ID!
	name: CaseVisualization!
}
enum UserRole {
	NORMAL
	MODERATOR
	ADMIN
}
enum CaseVisualization {
	V_2D
	V_3D
	V_PG3D
}
=======
  id: ID!
  name: String!
}

type userAlgTagLink {
  id: ID!
  user: User!
  tag: Tag!
  alg: Alg!
}

type Alg {
  id: ID!
  sequence: String!
  case: Case!
  up_votes: Int!
  total_votes: Int!
  current_user_vote: Boolean
}
>>>>>>> origin/master
