type Query {
  getCurrentUser: User
  getUser(id: ID!): User!
  getMultipleUser(
    id: String
    first: Int
    after: ID
    search: String
    sortBy: [String]
    sortDesc: [Boolean]
    filterBy: UserFilterInput
  ): UserPaginator!
  getPuzzle(id: ID, code: String): Puzzle!
  getMultiplePuzzle(
    id: String
    first: Int
    after: ID
    search: String
    sortBy: [String]
    sortDesc: [Boolean]
    filterBy: PuzzleFilterInput
  ): PuzzlePaginator!
  getAlgset(id: ID, code: String, puzzle_code: String): Algset!
  getMultipleAlgset(
    id: String
    first: Int
    after: ID
    search: String
    sortBy: [String]
    sortDesc: [Boolean]
    filterBy: AlgsetFilterInput
  ): AlgsetPaginator!
  getAlgcase(id: ID!): Algcase!
  getMultipleAlgcase(
    id: String
    first: Int
    after: ID
    search: String
    sortBy: [String]
    sortDesc: [Boolean]
    filterBy: AlgcaseFilterInput
  ): AlgcasePaginator!
  getAlg(id: ID!): Alg!
  getMultipleAlg(
    id: String
    first: Int
    after: ID
    search: String
    sortBy: [String]
    sortDesc: [Boolean]
    groupBy: [String]
    filterBy: AlgFilterInput
  ): AlgPaginator!
  getTag(id: ID!): Tag!
  getMultipleTag(
    id: String
    first: Int
    after: ID
    search: String
    sortBy: [String]
    sortDesc: [Boolean]
    filterBy: TagFilterInput
  ): TagPaginator!
}

type Mutation {
  deleteUser(id: ID!): User!
  updateUser(
    id: ID!
    name: String
    avatar: String
    country: String
    is_public: Boolean
    role: UserRole
  ): User!
  loginUser(email: String!, password: String!): Auth!
  socialLogin(provider: String!, code: String!): Auth!
  deletePuzzle(id: ID!): Puzzle!
  updatePuzzle(id: ID!, name: String, is_public: Boolean, code: String): Puzzle!
  createPuzzle(name: String!, code: String!): Puzzle!
  deleteAlgset(id: ID!): Algset!
  updateAlgset(
    id: ID!
    name: String
    is_public: Boolean
    mask: String
    visualization: CaseVisualization
  ): Algset!
  createAlgset(
    name: String
    mask: String
    visualization: CaseVisualization
    puzzle: Puzzle
    score: Int
  ): Algset!
  deleteAlgcase(id: ID!): Algcase!
  updateAlgcase(id: ID!, name: String): Algcase!
  createAlgcase(
    name: String
    mask: String
    puzzle: Puzzle
    algset: Algset
  ): Algcase!
  deleteAlg(id: ID!): Alg!
  updateAlg(id: ID!): Alg!
  createAlg(sequence: String): Alg!
  deleteAlgAlgcaseLink(id: ID!): AlgAlgcaseLink!
  updateAlgAlgcaseLink(id: ID!): AlgAlgcaseLink!
  createAlgAlgcaseLink(alg: Alg, algcase: Algcase): AlgAlgcaseLink!
  deleteUserAlgTagLink(id: ID!): UserAlgTagLink!
  updateUserAlgTagLink(id: ID!): UserAlgTagLink!
  createUserAlgTagLink(user: User, alg: Alg, tag: Tag): UserAlgTagLink!
  deleteAlgTagLink(id: ID!): AlgTagLink!
  createAlgTagLink(alg: Alg, tag: Tag): AlgTagLink!
  deleteTag(id: ID!): Tag!
  createTag(name: String): Tag!
  upsertUserAlgVoteLink(alg: ID!, vote_value: Integer!): UserAlgVoteLink!
}

type User {
  id: ID!
  wca_id: String
  email: String!
  name: String
  avatar: String
  country: String
  is_public: Boolean!
  created_at: Int!
  updated_at: Int
  created_by: User!
  role: UserRoleEnum!
}
type UserPaginator {
  paginatorInfo: PaginatorInfo!
  data: [User]!
}
type UserFilterInput {
  created_by: String
}
type Puzzle {
  id: ID!
  name: String!
  code: String!
  created_at: Int!
  updated_at: Int
  created_by: User!
  is_public: Boolean!
  algsets(
    id: String
    first: Int
    after: ID
    search: String
    sortBy: [String]
    sortDesc: [Boolean]
    created_by: String
    is_public: Boolean
  ): AlgsetPaginator!
}
type PuzzlePaginator {
  paginatorInfo: PaginatorInfo!
  data: [Puzzle]!
}
type PuzzleFilterInput {
  created_by: String
  is_public: Boolean
  code: String
}
type Algset {
  id: ID!
  name: String!
  code: String!
  mask: String
  visualization: CaseVisualization!
  created_at: Int!
  updated_at: Int
  created_by: User!
  is_public: Boolean!
  puzzle: Puzzle!
  parent: Algset
  algcases(
    id: String
    first: Int
    after: ID
    search: String
    sortBy: [String]
    sortDesc: [Boolean]
    created_by: String
  ): AlgcasePaginator!
  score: Int!
}
type AlgsetPaginator {
  paginatorInfo: PaginatorInfo!
  data: [Algset]!
}
type AlgsetFilterInput {
  created_by: String
  parent: String
  puzzle: String
  puzzle_code: String
  is_public: Boolean
  code: String
}
type Algcase {
  id: ID!
  name: String!
  created_at: Int!
  updated_at: Int
  created_by: User!
  algset: Algset!
  algs(
    id: String
    first: Int
    after: ID
    search: String
    sortBy: [String]
    sortDesc: [Boolean]
    created_by: String
    algcase_name: String
    algset_name: String
    puzzle_name: String
    tag_name: [String]
  ): AlgPaginator!
}
type AlgcasePaginator {
  paginatorInfo: PaginatorInfo!
  data: [Algcase]!
}
type AlgcaseFilterInput {
  created_by: String
  algset: String
}
type Alg {
  id: ID!
  sequence: String!
  created_at: Int!
  updated_at: Int
  created_by: User!
  score: Int!
  current_user_vote: UserAlgVoteLink
}
type AlgPaginator {
  paginatorInfo: PaginatorInfo!
  data: [Alg]!
}
type AlgFilterInput {
  created_by: String
  algcase_name: String
  algcase: ID
  algset_name: String
  puzzle_name: String
  tag_name: [String]
}
type AlgAlgcaseLink {
  id: ID!
  alg: Alg!
  algcase: Algcase!
  created_at: Int!
  updated_at: Int
  created_by: User!
}
type AlgAlgcaseLinkPaginator {
  paginatorInfo: PaginatorInfo!
  data: [AlgAlgcaseLink]!
}
type AlgTagLink {
  id: ID!
  alg: Alg!
  tag: Tag!
  created_at: Int!
  updated_at: Int
  created_by: User!
}
type AlgTagLinkPaginator {
  paginatorInfo: PaginatorInfo!
  data: [AlgTagLink]!
}
type UserAlgTagLink {
  id: ID!
  user: User!
  alg: Alg!
  tag: String!
  created_at: Int!
  updated_at: Int
  created_by: User!
}
type UserAlgTagLinkPaginator {
  paginatorInfo: PaginatorInfo!
  data: [UserAlgTagLink]!
}

type UserAlgVoteLink {
  id: ID!
  user: User!
  alg: Alg!
  vote_value: Integer!
  created_at: Int!
  updated_at: Int
  created_by: User!
}
type UserAlgTagVotePaginator {
  paginatorInfo: PaginatorInfo!
  data: [UserAlgVoteLink]!
}

type Tag {
  id: ID!
  name: String!
  created_at: Int!
  updated_at: Int
  created_by: User!
}
type TagPaginator {
  paginatorInfo: PaginatorInfo!
  data: [Tag]!
}
type TagFilterInput {
  created_by: String
}
type Auth {
  type: String!
  token: String!
  expiration: Int!
  user: User!
}
type PaginatorInfo {
  total: Int!
  count: Int!
}
type UserRoleEnum {
  id: ID!
  name: UserRole!
}
enum UserRole {
  NORMAL
  MODERATOR
  ADMIN
}
enum CaseVisualization {
  V_2D
  V_3D
  V_PG3D
}
