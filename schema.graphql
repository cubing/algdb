type Query {
  getUser(id: ID!): User!
  getUsers(): [User]!
  getPuzzles(): [Puzzle]!
  getTags(): [Tags]!
  getAlgs(tag_names: [String], user_id: ID!): [Alg]!
}

type Mutation {
  login(username: String!, password: String!): User!
  createPuzzle(): Puzzle!
  createAlgSet(puzzle_id: ID!): AlgSet!
  createCase(algset_id: ID!): Case!
  createAlg(case_id: ID!): Alg!
  createTag(name: String!): Tag!
  voteAlg(upvote: Boolean!): Alg!
  updateUser(user_id: ID!, is_public: Boolean): User!
  createUserAlgTagLink(tag_id: ID!, alg_id: ID!): UserAlgTagLink!
}

type User {
  id: ID!
  display_name: String!
  cubic_color_scheme: ColorScheme
  skewb_color_scheme: ColorScheme
  square1_color_scheme: ColorScheme
  megaminx_color_scheme: ColorScheme
  pyraminx_color_scheme: ColorScheme
  is_public: Boolean!
  favorited_algorithms: [Alg]
}

type ColorScheme {
  id: ID!
  side1: String
  side2: String
  side3: String
  side4: String
  side5: String
  side6: String
}

type Puzzle {
  id: ID!
  name: String!
  algSets(): [AlgSet]!
}

type AlgSet {
  id: ID!
  name: String!
  puzzle: Puzzle!
  cases(): [Case]!
}

type Case {
  id: ID!
  name: String!
  algset: AlgSet!
  algs(): [Alg]!
}

type Alg {
  id: ID!
  sequence: String!
  case: Case!
  up_votes: Int!
  total_votes: Int!
  current_user_vote: Boolean
}

type Tag {
  id: ID!
  name: String!
}

type UserAlgTagLink {
  id: ID!
  user: User!
  tag: Tag!
  alg: Alg!
}